# -*- coding: utf-8 -*-
"""ClusterPinguinsNoturno.ipynb
 
Automatically generated by Colab.
 
Original file is located at
    https://colab.research.google.com/drive/194VHZDFhx3oDsg4HZ2Jslso_GOE2-sKe
"""
 
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.cluster import DBSCAN
from sklearn.mixture import GaussianMixture
from sklearn.metrics.cluster import adjusted_rand_score
 
df = pd.read_csv("penguins.csv")
 
df.head()
 
df.describe()
 
df.describe(include='object')
 
df['sex'].unique()
 
df = df[df['flipper_length_mm'] != -132]
df = df[df['flipper_length_mm'] != 5000]
 
df = df.drop(df[df['sex'] == '.'].index)
 
df.head()
 
df.dropna(inplace=True)
 
df.head()
 
le = LabelEncoder()
 
df['sex'] = le.fit_transform(df['sex'])
 
df.head()
 
from sklearn.cluster import KMeans
 
kmeans = KMeans(n_clusters=2, random_state=0).fit(df)
 
# kmeans.labels_
 
df['cluster_label'] = kmeans.labels_
display(df.head())
 
import plotly.express as px
from sklearn.cluster import KMeans
 
inertia = []
k_range = range(1, 10)
 
for k in k_range:
    kmeans = KMeans(n_clusters=k, random_state=0)
    kmeans.fit(df)
    inertia.append(kmeans.inertia_)
 
fig = px.line(x=list(k_range), y=inertia, markers=True, title='Elbow Method')
fig.update_layout(xaxis_title='Number of clusters (k)', yaxis_title='Inertia')
fig.show()
 
kmeans = KMeans(n_clusters=3, random_state=0).fit(df)
 
df['cluster_label'] = kmeans.labels_
display(df.head())
 
fig = px.scatter(df, x='flipper_length_mm', y='body_mass_g', color='cluster_label', title='Cluster Visualization')
fig.show()
 
# RODAR DBSCAN PROS PINGUINS
dbscan = DBSCAN()
df['dbscan_label'] = dbscan.fit_predict(df)
 
# RODAR GAUSSIAN MIXTURE PROS PINGUINS
gm = GaussianMixture(n_components=3, random_state=42)
df['gm_label'] = gm.fit_predict(df)
 
df.head()
 
ari_kmeans_dbscan = adjusted_rand_score(df['cluster_label'], df['dbscan_label'])
print(f"Adjusted Rand Index KMeans and DBSCAN: {ari_kmeans_dbscan}")
 
ari_kmeans_gm = adjusted_rand_score(df['cluster_label'], df['gm_label'])
print(f"Adjusted Rand Index KMeans and Gaussian Mixture: {ari_kmeans_gm}")
 
ari_dbscan_gm = adjusted_rand_score(df['dbscan_label'], df['gm_label'])
print(f"Adjusted Rand Index DBSCAN and Gaussian Mixture: {ari_dbscan_gm}")
 
"""# MOOON Dataset"""
 
url_bd = 'https://raw.githubusercontent.com/reisanar/datasets/master/moons.csv'
moons = pd.read_csv(url_bd)
 
moons.head()
 
px.scatter(x=moons['X'], y=moons['Y'])
 
# RODAR KMEANS: https://scikit-learn.org/stable/modules/generated/sklearn.cluster.KMeans.html#sklearn.cluster.KMeans
km = kmeans = KMeans(n_clusters=4, random_state=42)
 
# RODAR DBSCAN: https://scikit-learn.org/stable/modules/generated/sklearn.cluster.DBSCAN.html
db = DBSCAN(eps=0.4)
 
# RODAR GAUSSIAN MIXTURE: https://scikit-learn.org/stable/modules/generated/sklearn.mixture.GaussianMixture.html#sklearn.mixture.GaussianMixture
gm = GaussianMixture(n_components=4, random_state=42)
 
km_c = km.fit_predict(moons)
gm_c = gm.fit_predict(moons)
db_c = db.fit_predict(moons)
 
# Plot original moons dataset
fig_moons = px.scatter(moons, x='X', y='Y', title='Original Moons Dataset')
fig_moons.show()
 
# KMeans clustering and plotting
fig_kmeans = px.scatter(moons, x='X', y='Y', color=km_c, title='KMeans Clustering')
fig_kmeans.show()
 
# DBSCAN clustering and plotting
fig_dbscan = px.scatter(moons, x='X', y='Y', color=db_c, title='DBSCAN Clustering')
fig_dbscan.show()
 
# Gaussian Mixture clustering and plotting
fig_gm = px.scatter(moons, x='X', y='Y', color=gm_c, title='Gaussian Mixture Clustering')
fig_gm.show()
 
df.head()